// Generated by gencpp from file sam_custom_messages/Object.msg
// DO NOT EDIT!


#ifndef SAM_CUSTOM_MESSAGES_MESSAGE_OBJECT_H
#define SAM_CUSTOM_MESSAGES_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sam_custom_messages
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : Id(0)
    , Type(0)
    , Info()  {
    }
  Object_(const ContainerAllocator& _alloc)
    : Id(0)
    , Type(0)
    , Info(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _Id_type;
  _Id_type Id;

   typedef int8_t _Type_type;
  _Type_type Type;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _Info_type;
  _Info_type Info;





  typedef boost::shared_ptr< ::sam_custom_messages::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sam_custom_messages::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::sam_custom_messages::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::sam_custom_messages::Object > ObjectPtr;
typedef boost::shared_ptr< ::sam_custom_messages::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sam_custom_messages::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sam_custom_messages::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sam_custom_messages::Object_<ContainerAllocator1> & lhs, const ::sam_custom_messages::Object_<ContainerAllocator2> & rhs)
{
  return lhs.Id == rhs.Id &&
    lhs.Type == rhs.Type &&
    lhs.Info == rhs.Info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sam_custom_messages::Object_<ContainerAllocator1> & lhs, const ::sam_custom_messages::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sam_custom_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sam_custom_messages::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sam_custom_messages::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sam_custom_messages::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sam_custom_messages::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_custom_messages::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_custom_messages::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sam_custom_messages::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08793d2cad4a594af24da817df20da39";
  }

  static const char* value(const ::sam_custom_messages::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08793d2cad4a594aULL;
  static const uint64_t static_value2 = 0xf24da817df20da39ULL;
};

template<class ContainerAllocator>
struct DataType< ::sam_custom_messages::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sam_custom_messages/Object";
  }

  static const char* value(const ::sam_custom_messages::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sam_custom_messages::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message containg information on objects within environment\n"
"#\n"
"# Unique ID of object\n"
"int8 Id\n"
"#\n"
"# Type of object ID\n"
"int8 Type\n"
"#\n"
"# Additional information on object\n"
"string[] Info\n"
;
  }

  static const char* value(const ::sam_custom_messages::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sam_custom_messages::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Id);
      stream.next(m.Type);
      stream.next(m.Info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sam_custom_messages::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sam_custom_messages::Object_<ContainerAllocator>& v)
  {
    s << indent << "Id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Id);
    s << indent << "Type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Type);
    s << indent << "Info[]" << std::endl;
    for (size_t i = 0; i < v.Info.size(); ++i)
    {
      s << indent << "  Info[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAM_CUSTOM_MESSAGES_MESSAGE_OBJECT_H
