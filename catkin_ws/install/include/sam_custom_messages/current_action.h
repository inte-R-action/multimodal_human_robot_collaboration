// Generated by gencpp from file sam_custom_messages/current_action.msg
// DO NOT EDIT!


#ifndef SAM_CUSTOM_MESSAGES_MESSAGE_CURRENT_ACTION_H
#define SAM_CUSTOM_MESSAGES_MESSAGE_CURRENT_ACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sam_custom_messages
{
template <class ContainerAllocator>
struct current_action_
{
  typedef current_action_<ContainerAllocator> Type;

  current_action_()
    : Header()
    , UserId(0)
    , UserName()
    , ActionProbs()  {
    }
  current_action_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , UserId(0)
    , UserName(_alloc)
    , ActionProbs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef int8_t _UserId_type;
  _UserId_type UserId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _UserName_type;
  _UserName_type UserName;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ActionProbs_type;
  _ActionProbs_type ActionProbs;





  typedef boost::shared_ptr< ::sam_custom_messages::current_action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sam_custom_messages::current_action_<ContainerAllocator> const> ConstPtr;

}; // struct current_action_

typedef ::sam_custom_messages::current_action_<std::allocator<void> > current_action;

typedef boost::shared_ptr< ::sam_custom_messages::current_action > current_actionPtr;
typedef boost::shared_ptr< ::sam_custom_messages::current_action const> current_actionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sam_custom_messages::current_action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sam_custom_messages::current_action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sam_custom_messages::current_action_<ContainerAllocator1> & lhs, const ::sam_custom_messages::current_action_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.UserId == rhs.UserId &&
    lhs.UserName == rhs.UserName &&
    lhs.ActionProbs == rhs.ActionProbs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sam_custom_messages::current_action_<ContainerAllocator1> & lhs, const ::sam_custom_messages::current_action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sam_custom_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sam_custom_messages::current_action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sam_custom_messages::current_action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sam_custom_messages::current_action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sam_custom_messages::current_action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_custom_messages::current_action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_custom_messages::current_action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sam_custom_messages::current_action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a22afcb1583334c436419d2dee34df6";
  }

  static const char* value(const ::sam_custom_messages::current_action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a22afcb1583334cULL;
  static const uint64_t static_value2 = 0x436419d2dee34df6ULL;
};

template<class ContainerAllocator>
struct DataType< ::sam_custom_messages::current_action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sam_custom_messages/current_action";
  }

  static const char* value(const ::sam_custom_messages::current_action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sam_custom_messages::current_action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Message containing predictions of what action user is currently performing\n"
"#\n"
"## std_msgs/Header.msg\n"
"# sequence ID: consecutively increasing ID \n"
"# uint32 seq\n"
"# Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"# time stamp\n"
"# Frame this data is associated with\n"
"# string frame_id\n"
"Header Header\n"
"#\n"
"## ID of user (robot or human)\n"
"int8 UserId\n"
"#\n"
"## Name of user (robot or human)\n"
"string UserName\n"
"#\n"
"## Probabilities of curent actions\n"
"float64[] ActionProbs\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sam_custom_messages::current_action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sam_custom_messages::current_action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.UserId);
      stream.next(m.UserName);
      stream.next(m.ActionProbs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct current_action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sam_custom_messages::current_action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sam_custom_messages::current_action_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "UserId: ";
    Printer<int8_t>::stream(s, indent + "  ", v.UserId);
    s << indent << "UserName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.UserName);
    s << indent << "ActionProbs[]" << std::endl;
    for (size_t i = 0; i < v.ActionProbs.size(); ++i)
    {
      s << indent << "  ActionProbs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ActionProbs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAM_CUSTOM_MESSAGES_MESSAGE_CURRENT_ACTION_H
