
classdef capability < ros.Message
    %capability MATLAB implementation of sam_custom_messages/capability
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sam_custom_messages/capability' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1e2d1f854bb1612f413022281c6219c9' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Object' 'Pose' 'UserId' 'Type' 'Info' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'object' 'pose' 'user_id' 'type' 'info' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 'ros.msggen.sam_custom_messages.Object' ...
			 'ros.msggen.geometry_msgs.Pose' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Object
        Pose
        UserId
        Type
        Info
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'capability', 'Header')
            obj.Header = val;
        end
        function set.Object(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.sam_custom_messages.Object'};
            validateattributes(val, validClasses, validAttributes, 'capability', 'Object')
            obj.Object = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'capability', 'Pose')
            obj.Pose = val;
        end
        function set.UserId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'capability', 'UserId');
            obj.UserId = int8(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'capability', 'Type');
            obj.Type = int8(val);
        end
        function set.Info(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'capability', 'Info');
            obj.Info = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sam_custom_messages.capability.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sam_custom_messages.capability;
            obj.reload(strObj);
        end
    end
end
